
GPIOSlopeTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005ba8  08005ba8  00006ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c68  08005c68  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c68  08005c68  00006c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c70  08005c70  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c74  08005c74  00006c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  08005cd4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005cd4  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e07  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c2  00000000  00000000  00017e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0001a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bff  00000000  00000000  0001b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f58  00000000  00000000  0001bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ffe  00000000  00000000  00042d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2809  00000000  00000000  00054d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014750e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  00147554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014bc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b90 	.word	0x08005b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005b90 	.word	0x08005b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fb67 	bl	8001252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f814 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f904 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b8c:	f000 f862 	bl	8000c54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b90:	f000 f8d0 	bl	8000d34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start TIM2 Input Capture Interrupt on Channel 1
  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK) {
 8000b94:	2100      	movs	r1, #0
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <main+0x30>)
 8000b98:	f002 fae2 	bl	8003160 <HAL_TIM_IC_Start_IT>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <main+0x2c>
	  Error_Handler(); // Handle error if Input Capture start fails
 8000ba2:	f000 f90f 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <main+0x2c>
 8000bac:	20000078 	.word	0x20000078

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b096      	sub	sp, #88	@ 0x58
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2244      	movs	r2, #68	@ 0x44
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fb66 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bd6:	f000 fef9 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000be0:	f000 f8f0 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000be4:	2310      	movs	r3, #16
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf0:	2360      	movs	r3, #96	@ 0x60
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c00:	2328      	movs	r3, #40	@ 0x28
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 ff2f 	bl	8001a78 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c20:	f000 f8d0 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 faf7 	bl	8002230 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c48:	f000 f8bc 	bl	8000dc4 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3758      	adds	r7, #88	@ 0x58
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca8:	4821      	ldr	r0, [pc, #132]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000caa:	f002 f9a1 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000cb4:	f000 f886 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481a      	ldr	r0, [pc, #104]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000cc6:	f002 fd38 	bl	800373a <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cd0:	f000 f878 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cd4:	4816      	ldr	r0, [pc, #88]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000cd6:	f002 f9e2 	bl	800309e <HAL_TIM_IC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 f870 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480f      	ldr	r0, [pc, #60]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000cf4:	f003 f8ea 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000cfe:	f000 f861 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d02:	230a      	movs	r3, #10
 8000d04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_TIM2_Init+0xdc>)
 8000d1a:	f002 fc72 	bl	8003602 <HAL_TIM_IC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d24:	f000 f84e 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	@ 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000078 	.word	0x20000078

08000d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <MX_USART1_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d78:	f003 f94e 	bl	8004018 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f81f 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000c4 	.word	0x200000c4
 8000d90:	40013800 	.word	0x40013800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_GPIO_Init+0x2c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <MX_GPIO_Init+0x2c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_GPIO_Init+0x2c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <Error_Handler+0x8>

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <HAL_MspInit+0x44>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e38:	d130      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f000 fbe8 	bl	800165c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	201c      	movs	r0, #28
 8000e92:	f000 fb2e 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e96:	201c      	movs	r0, #28
 8000e98:	f000 fb47 	bl	800152a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0ac      	sub	sp, #176	@ 0xb0
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2288      	movs	r2, #136	@ 0x88
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 f9e1 	bl	8005290 <memset>
  if(huart->Instance==USART1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <HAL_UART_MspInit+0xc4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d144      	bne.n	8000f62 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000edc:	2300      	movs	r3, #0
 8000ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fbc7 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef0:	f7ff ff68 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4e:	f000 fb85 	bl	800165c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2025      	movs	r0, #37	@ 0x25
 8000f58:	f000 facb 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5c:	2025      	movs	r0, #37	@ 0x25
 8000f5e:	f000 fae4 	bl	800152a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	37b0      	adds	r7, #176	@ 0xb0
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fce:	f000 f995 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  // Check timeout for edge detection
  if (edgeDetected && (HAL_GetTick() - lastEdgeTime > timeout)) {
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <SysTick_Handler+0x68>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d024      	beq.n	8001026 <SysTick_Handler+0x5e>
 8000fdc:	f000 f9a2 	bl	8001324 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <SysTick_Handler+0x6c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d91a      	bls.n	8001026 <SysTick_Handler+0x5e>
	  edgeDetected = 0; // Reset the state after timeout
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <SysTick_Handler+0x68>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	  char timeoutMsg[] = "Timeout: No falling edge detected.\r\n";
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <SysTick_Handler+0x70>)
 8000ff8:	463c      	mov	r4, r7
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001004:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001008:	6020      	str	r0, [r4, #0]
 800100a:	3404      	adds	r4, #4
 800100c:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)timeoutMsg, strlen(timeoutMsg), HAL_MAX_DELAY);
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	4639      	mov	r1, r7
 800101c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <SysTick_Handler+0x74>)
 8001022:	f003 f847 	bl	80040b4 <HAL_UART_Transmit>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	@ 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	bf00      	nop
 8001030:	20000158 	.word	0x20000158
 8001034:	2000015c 	.word	0x2000015c
 8001038:	08005ba8 	.word	0x08005ba8
 800103c:	200000c4 	.word	0x200000c4

08001040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001046:	483c      	ldr	r0, [pc, #240]	@ (8001138 <TIM2_IRQHandler+0xf8>)
 8001048:	f002 f9d4 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Check flag and interrupt source status
  // Check if the interrupt is for TIM2 channel 1
//  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC1) != RESET &&
//	  __HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1) != RESET)
  if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1) != RESET)
 800104c:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <TIM2_IRQHandler+0xf8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d16a      	bne.n	8001130 <TIM2_IRQHandler+0xf0>
  {
	  uint32_t currentTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4836      	ldr	r0, [pc, #216]	@ (8001138 <TIM2_IRQHandler+0xf8>)
 800105e:	f002 fc35 	bl	80038cc <HAL_TIM_ReadCapturedValue>
 8001062:	6378      	str	r0, [r7, #52]	@ 0x34

	  if (edgeDetected == 0) {
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <TIM2_IRQHandler+0xfc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10b      	bne.n	8001086 <TIM2_IRQHandler+0x46>
		  // Capture rising edge
		  risingEdgeTime = currentTime;
 800106e:	4a34      	ldr	r2, [pc, #208]	@ (8001140 <TIM2_IRQHandler+0x100>)
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	6013      	str	r3, [r2, #0]
		  lastEdgeTime = HAL_GetTick(); // Store the time of the event
 8001074:	f000 f956 	bl	8001324 <HAL_GetTick>
 8001078:	4603      	mov	r3, r0
 800107a:	4a32      	ldr	r2, [pc, #200]	@ (8001144 <TIM2_IRQHandler+0x104>)
 800107c:	6013      	str	r3, [r2, #0]
		  edgeDetected = 1;            // Now wait for falling edge
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <TIM2_IRQHandler+0xfc>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e04f      	b.n	8001126 <TIM2_IRQHandler+0xe6>
	  } else {
		  // Capture falling edge
		  fallingEdgeTime = currentTime;
 8001086:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <TIM2_IRQHandler+0x108>)
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	6013      	str	r3, [r2, #0]

		  // Calculate duration, accounting for timer overflow
		  if (fallingEdgeTime >= risingEdgeTime) {
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <TIM2_IRQHandler+0x108>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <TIM2_IRQHandler+0x100>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d316      	bcc.n	80010c6 <TIM2_IRQHandler+0x86>
		      pulseDuration = (fallingEdgeTime - risingEdgeTime) * 12.5; // In nanoseconds
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <TIM2_IRQHandler+0x108>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <TIM2_IRQHandler+0x100>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb58 	bl	8000758 <__aeabi_ui2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <TIM2_IRQHandler+0x10c>)
 80010ae:	f7ff f8e7 	bl	8000280 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fbc7 	bl	800084c <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <TIM2_IRQHandler+0x110>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e019      	b.n	80010fa <TIM2_IRQHandler+0xba>
		  } else {
		      pulseDuration = ((htim2.Init.Period - risingEdgeTime) + fallingEdgeTime + 1) * 12.5; // In nanoseconds
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <TIM2_IRQHandler+0xf8>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <TIM2_IRQHandler+0x100>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <TIM2_IRQHandler+0x108>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	3301      	adds	r3, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fb3d 	bl	8000758 <__aeabi_ui2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <TIM2_IRQHandler+0x10c>)
 80010e4:	f7ff f8cc 	bl	8000280 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fbac 	bl	800084c <__aeabi_d2uiz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a16      	ldr	r2, [pc, #88]	@ (8001150 <TIM2_IRQHandler+0x110>)
 80010f8:	6013      	str	r3, [r2, #0]
		  }

		  // Send duration via UART
		  char buffer[50];
		  sprintf(buffer, "Pulse Duration: %lu ns\r\n", pulseDuration);
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <TIM2_IRQHandler+0x110>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	463b      	mov	r3, r7
 8001100:	4914      	ldr	r1, [pc, #80]	@ (8001154 <TIM2_IRQHandler+0x114>)
 8001102:	4618      	mov	r0, r3
 8001104:	f004 f8a4 	bl	8005250 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001108:	463b      	mov	r3, r7
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f860 	bl	80001d0 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4639      	mov	r1, r7
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800111a:	480f      	ldr	r0, [pc, #60]	@ (8001158 <TIM2_IRQHandler+0x118>)
 800111c:	f002 ffca 	bl	80040b4 <HAL_UART_Transmit>

		  edgeDetected = 0; // Reset for the next measurement
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <TIM2_IRQHandler+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	  }

	  // Clear the interrupt flag
	  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8001126:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <TIM2_IRQHandler+0xf8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0202 	mvn.w	r2, #2
 800112e:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000078 	.word	0x20000078
 800113c:	20000158 	.word	0x20000158
 8001140:	2000014c 	.word	0x2000014c
 8001144:	2000015c 	.word	0x2000015c
 8001148:	20000150 	.word	0x20000150
 800114c:	40290000 	.word	0x40290000
 8001150:	20000154 	.word	0x20000154
 8001154:	08005bd0 	.word	0x08005bd0
 8001158:	200000c4 	.word	0x200000c4

0800115c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <USART1_IRQHandler+0x10>)
 8001162:	f003 f831 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000c4 	.word	0x200000c4

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f004 f87e 	bl	80052a0 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20018000 	.word	0x20018000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000160 	.word	0x20000160
 80011d8:	200002b0 	.word	0x200002b0

080011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff ffea 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f004 f83d 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001232:	f7ff fca3 	bl	8000b7c <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001238:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001244:	08005c78 	.word	0x08005c78
  ldr r2, =_sbss
 8001248:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800124c:	200002b0 	.word	0x200002b0

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>

08001252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f93d 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	200f      	movs	r0, #15
 8001264:	f000 f80e 	bl	8001284 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e001      	b.n	8001278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001274:	f7ff fdac 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001278:	79fb      	ldrb	r3, [r7, #7]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_InitTick+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_InitTick+0x70>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_InitTick+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f949 	bl	8001546 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d809      	bhi.n	80012d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f000 f913 	bl	80014f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_InitTick+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e004      	b.n	80012e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e001      	b.n	80012e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20000164 	.word	0x20000164

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000164 	.word	0x20000164

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d008      	beq.n	8001588 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e022      	b.n	80015ce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020e 	bic.w	r2, r2, #14
 8001596:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	f003 021c 	and.w	r2, r3, #28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d005      	beq.n	80015fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e029      	b.n	8001652 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 021c 	and.w	r2, r3, #28
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    }
  }
  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e17f      	b.n	800196c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8171 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d005      	beq.n	800169c <HAL_GPIO_Init+0x40>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d118      	bne.n	800173c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80ac 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b5f      	ldr	r3, [pc, #380]	@ (800198c <HAL_GPIO_Init+0x330>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	4a5e      	ldr	r2, [pc, #376]	@ (800198c <HAL_GPIO_Init+0x330>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	@ 0x60
 800181a:	4b5c      	ldr	r3, [pc, #368]	@ (800198c <HAL_GPIO_Init+0x330>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001826:	4a5a      	ldr	r2, [pc, #360]	@ (8001990 <HAL_GPIO_Init+0x334>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x242>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	@ (8001994 <HAL_GPIO_Init+0x338>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x23e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	@ (8001998 <HAL_GPIO_Init+0x33c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x23a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	@ (800199c <HAL_GPIO_Init+0x340>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x236>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	@ (80019a0 <HAL_GPIO_Init+0x344>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x232>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	@ (80019a4 <HAL_GPIO_Init+0x348>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	@ (80019a8 <HAL_GPIO_Init+0x34c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x22a>
 8001882:	2306      	movs	r3, #6
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001886:	2307      	movs	r3, #7
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b0:	4937      	ldr	r1, [pc, #220]	@ (8001990 <HAL_GPIO_Init+0x334>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018be:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_GPIO_Init+0x350>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e2:	4a32      	ldr	r2, [pc, #200]	@ (80019ac <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_GPIO_Init+0x350>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190c:	4a27      	ldr	r2, [pc, #156]	@ (80019ac <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HAL_GPIO_Init+0x350>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <HAL_GPIO_Init+0x350>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_GPIO_Init+0x350>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001960:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <HAL_GPIO_Init+0x350>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae78 	bne.w	800166c <HAL_GPIO_Init+0x10>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000c00 	.word	0x48000c00
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48001400 	.word	0x48001400
 80019a8:	48001800 	.word	0x48001800
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019da:	d130      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019dc:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019e8:	d038      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019f2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2232      	movs	r2, #50	@ 0x32
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a10:	e002      	b.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a24:	d102      	bne.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f2      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a38:	d110      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e00f      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4a:	d007      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a54:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e3ca      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4b97      	ldr	r3, [pc, #604]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4b94      	ldr	r3, [pc, #592]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80e4 	beq.w	8001c74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4a>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	f040 808b 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f040 8087 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac2:	4b89      	ldr	r3, [pc, #548]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x62>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3a2      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_RCC_OscConfig+0x7c>
 8001aea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af2:	e005      	b.n	8001b00 <HAL_RCC_OscConfig+0x88>
 8001af4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d223      	bcs.n	8001b4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fd55 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e383      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b18:	4b73      	ldr	r3, [pc, #460]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a72      	ldr	r2, [pc, #456]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b70      	ldr	r3, [pc, #448]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	496d      	ldr	r1, [pc, #436]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b36:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4968      	ldr	r1, [pc, #416]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	e025      	b.n	8001b98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b63      	ldr	r3, [pc, #396]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4960      	ldr	r1, [pc, #384]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	495b      	ldr	r1, [pc, #364]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd15 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e343      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 fc4a 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4950      	ldr	r1, [pc, #320]	@ (8001cec <HAL_RCC_OscConfig+0x274>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf0 <HAL_RCC_OscConfig+0x278>)
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb61 	bl	8001284 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d052      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	e327      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d032      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb9e 	bl	8001324 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bec:	f7ff fb9a 	bl	8001324 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e310      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4931      	ldr	r1, [pc, #196]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	492c      	ldr	r1, [pc, #176]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e01a      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a29      	ldr	r2, [pc, #164]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fb6b 	bl	8001324 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c52:	f7ff fb67 	bl	8001324 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e2dd      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1da>
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d074      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x21a>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d10e      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d064      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d160      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e2ba      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e026      	b.n	8001d10 <HAL_RCC_OscConfig+0x298>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cca:	d115      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x280>
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a02      	ldr	r2, [pc, #8]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x298>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08005bec 	.word	0x08005bec
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	4ba0      	ldr	r3, [pc, #640]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a9f      	ldr	r2, [pc, #636]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b9d      	ldr	r3, [pc, #628]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a9c      	ldr	r2, [pc, #624]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb04 	bl	8001324 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fb00 	bl	8001324 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	@ 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e276      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4b92      	ldr	r3, [pc, #584]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2a8>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff faf0 	bl	8001324 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff faec 	bl	8001324 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e262      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	4b88      	ldr	r3, [pc, #544]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2d0>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d060      	beq.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x310>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d119      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d116      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d88:	4b7c      	ldr	r3, [pc, #496]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x328>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e23f      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b76      	ldr	r3, [pc, #472]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	4973      	ldr	r1, [pc, #460]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	e040      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d023      	beq.n	8001e06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff faab 	bl	8001324 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff faa7 	bl	8001324 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e21d      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	4b65      	ldr	r3, [pc, #404]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b62      	ldr	r3, [pc, #392]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	495f      	ldr	r1, [pc, #380]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b5d      	ldr	r3, [pc, #372]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fa87 	bl	8001324 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fa83 	bl	8001324 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1f9      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e52:	4a4a      	ldr	r2, [pc, #296]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fa62 	bl	8001324 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fa5e 	bl	8001324 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1d4      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	4b41      	ldr	r3, [pc, #260]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3ec>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fa45 	bl	8001324 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa41 	bl	8001324 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1b7      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a6 	beq.w	8002018 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	4a26      	ldr	r2, [pc, #152]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fa08 	bl	8001324 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7ff fa04 	bl	8001324 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e17a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4d8>
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4e:	e029      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d115      	bne.n	8001f84 <HAL_RCC_OscConfig+0x50c>
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6e:	4a03      	ldr	r2, [pc, #12]	@ (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f78:	e014      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	4b9c      	ldr	r3, [pc, #624]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	4a9b      	ldr	r2, [pc, #620]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f94:	4b98      	ldr	r3, [pc, #608]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	4a97      	ldr	r2, [pc, #604]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f9ba 	bl	8001324 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f9b6 	bl	8001324 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e12a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b8b      	ldr	r3, [pc, #556]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ed      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x53c>
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f9a3 	bl	8001324 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f99f 	bl	8001324 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e113      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ed      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b7a      	ldr	r3, [pc, #488]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	4a79      	ldr	r2, [pc, #484]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80fe 	beq.w	800221e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	2b02      	cmp	r3, #2
 8002028:	f040 80d0 	bne.w	80021cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800202c:	4b72      	ldr	r3, [pc, #456]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	429a      	cmp	r2, r3
 800203e:	d130      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	3b01      	subs	r3, #1
 800204c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d127      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d11f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800206c:	2a07      	cmp	r2, #7
 800206e:	bf14      	ite	ne
 8002070:	2201      	movne	r2, #1
 8002072:	2200      	moveq	r2, #0
 8002074:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	4293      	cmp	r3, r2
 8002078:	d113      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d06e      	beq.n	8002180 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d069      	beq.n	800217c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a8:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b4:	4b50      	ldr	r3, [pc, #320]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0ad      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c4:	4b4c      	ldr	r3, [pc, #304]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7ff f928 	bl	8001324 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f924 	bl	8001324 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e09a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <HAL_RCC_OscConfig+0x784>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002106:	3a01      	subs	r2, #1
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002110:	0212      	lsls	r2, r2, #8
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002118:	0852      	lsrs	r2, r2, #1
 800211a:	3a01      	subs	r2, #1
 800211c:	0552      	lsls	r2, r2, #21
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002124:	0852      	lsrs	r2, r2, #1
 8002126:	3a01      	subs	r2, #1
 8002128:	0652      	lsls	r2, r2, #25
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002130:	0912      	lsrs	r2, r2, #4
 8002132:	0452      	lsls	r2, r2, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	4930      	ldr	r1, [pc, #192]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800213c:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2d      	ldr	r2, [pc, #180]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002142:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002148:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002154:	f7ff f8e6 	bl	8001324 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff f8e2 	bl	8001324 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e058      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800217a:	e050      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04f      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d148      	bne.n	800221e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a4:	f7ff f8be 	bl	8001324 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff f8ba 	bl	8001324 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e030      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x734>
 80021ca:	e028      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d023      	beq.n	800221a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff f8a1 	bl	8001324 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	e00c      	b.n	8002200 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff f89d 	bl	8001324 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d905      	bls.n	8002200 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e013      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x7b0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ec      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x7b0>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4905      	ldr	r1, [pc, #20]	@ (8002228 <HAL_RCC_OscConfig+0x7b0>)
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_OscConfig+0x7b4>)
 8002214:	4013      	ands	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
 8002218:	e001      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	feeefffc 	.word	0xfeeefffc

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0e7      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b75      	ldr	r3, [pc, #468]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b72      	ldr	r3, [pc, #456]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4970      	ldr	r1, [pc, #448]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b6e      	ldr	r3, [pc, #440]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0cf      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800228c:	429a      	cmp	r2, r3
 800228e:	d908      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b63      	ldr	r3, [pc, #396]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4960      	ldr	r1, [pc, #384]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d04c      	beq.n	8002348 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d121      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0a6      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	4b54      	ldr	r3, [pc, #336]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e09a      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e08e      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e086      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4943      	ldr	r1, [pc, #268]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7ff f804 	bl	8001324 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f800 	bl	8001324 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e06e      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b3a      	ldr	r3, [pc, #232]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002360:	429a      	cmp	r2, r3
 8002362:	d208      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	492b      	ldr	r1, [pc, #172]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002376:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d210      	bcs.n	80023a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	4923      	ldr	r1, [pc, #140]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e036      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4918      	ldr	r1, [pc, #96]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4910      	ldr	r1, [pc, #64]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e4:	f000 f824 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	490b      	ldr	r1, [pc, #44]	@ (8002424 <HAL_RCC_ClockConfig+0x1f4>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1f8>)
 8002402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1fc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe ff3b 	bl	8001284 <HAL_InitTick>
 800240e:	4603      	mov	r3, r0
 8002410:	72fb      	strb	r3, [r7, #11]

  return status;
 8002412:	7afb      	ldrb	r3, [r7, #11]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
 8002424:	08005bec 	.word	0x08005bec
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002464:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002470:	4b31      	ldr	r3, [pc, #196]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e005      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800248c:	4a2b      	ldr	r2, [pc, #172]	@ (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e004      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d134      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024be:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xac>
 80024d4:	e005      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024d8:	617b      	str	r3, [r7, #20]
      break;
 80024da:	e005      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x114>)
 80024de:	617b      	str	r3, [r7, #20]
      break;
 80024e0:	e002      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	617b      	str	r3, [r7, #20]
      break;
 80024e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	3301      	adds	r3, #1
 80024f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0e5b      	lsrs	r3, r3, #25
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	3301      	adds	r3, #1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002528:	69bb      	ldr	r3, [r7, #24]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	08005c04 	.word	0x08005c04
 8002540:	00f42400 	.word	0x00f42400
 8002544:	007a1200 	.word	0x007a1200

08002548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000000 	.word	0x20000000

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002564:	f7ff fff0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4904      	ldr	r1, [pc, #16]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08005bfc 	.word	0x08005bfc

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002590:	f7ff ffda 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0adb      	lsrs	r3, r3, #11
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08005bfc 	.word	0x08005bfc

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff f9ee 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e4:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff f9de 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002608:	d10b      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	@ 0x80
 800260e:	d919      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2ba0      	cmp	r3, #160	@ 0xa0
 8002614:	d902      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e013      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e010      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	@ 0x80
 8002626:	d902      	bls.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002628:	2303      	movs	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e00a      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	@ 0x80
 8002632:	d102      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002634:	2302      	movs	r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e004      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b70      	cmp	r3, #112	@ 0x70
 800263e:	d101      	bne.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4909      	ldr	r1, [pc, #36]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002680:	2300      	movs	r3, #0
 8002682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d041      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002698:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800269c:	d02a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800269e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026a2:	d824      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026ae:	d81e      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b8:	d010      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ba:	e018      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026bc:	4b86      	ldr	r3, [pc, #536]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a85      	ldr	r2, [pc, #532]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c8:	e015      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fabb 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fba6 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	74fb      	strb	r3, [r7, #19]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fc:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800270a:	4973      	ldr	r1, [pc, #460]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d041      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002728:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800272c:	d02a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800272e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002732:	d824      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800273a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800273e:	d81e      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a61      	ldr	r2, [pc, #388]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa73 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fb5e 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800278c:	4b52      	ldr	r3, [pc, #328]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800279a:	494f      	ldr	r1, [pc, #316]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a0 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	4a40      	ldr	r2, [pc, #256]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	@ 0x58
 80027dc:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fd94 	bl	8001324 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fe:	e009      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe fd90 	bl	8001324 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	74fb      	strb	r3, [r7, #19]
        break;
 8002812:	e005      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002814:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d15c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b2c      	ldr	r3, [pc, #176]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002830:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d019      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002844:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b21      	ldr	r3, [pc, #132]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	4a20      	ldr	r2, [pc, #128]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002870:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fd4f 	bl	8001324 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00b      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fd4b 	bl	8001324 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d902      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	74fb      	strb	r3, [r7, #19]
            break;
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ec      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002902:	4b98      	ldr	r3, [pc, #608]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	4994      	ldr	r1, [pc, #592]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b8f      	ldr	r3, [pc, #572]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 020c 	bic.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002932:	498c      	ldr	r1, [pc, #560]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002946:	4b87      	ldr	r3, [pc, #540]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	4983      	ldr	r1, [pc, #524]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002968:	4b7e      	ldr	r3, [pc, #504]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	497b      	ldr	r1, [pc, #492]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298a:	4b76      	ldr	r3, [pc, #472]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	4972      	ldr	r1, [pc, #456]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	496a      	ldr	r1, [pc, #424]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b65      	ldr	r3, [pc, #404]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	4961      	ldr	r1, [pc, #388]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	4959      	ldr	r1, [pc, #356]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a12:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a20:	4950      	ldr	r1, [pc, #320]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a34:	4b4b      	ldr	r3, [pc, #300]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	4948      	ldr	r1, [pc, #288]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a56:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	493f      	ldr	r1, [pc, #252]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d028      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	4937      	ldr	r1, [pc, #220]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e011      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aae:	d10c      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f8c8 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	491f      	ldr	r1, [pc, #124]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f899 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02b      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b42:	4908      	ldr	r1, [pc, #32]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a02      	ldr	r2, [pc, #8]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e014      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f867 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02f      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ba6:	4928      	ldr	r1, [pc, #160]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f844 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f925 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c04:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c12:	490d      	ldr	r1, [pc, #52]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c26:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c36:	4904      	ldr	r1, [pc, #16]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5a:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d047      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e044      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d018      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x86>
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d825      	bhi.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d002      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x62>
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d009      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x74>
 8002cac:	e020      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cae:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11d      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e01a      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e013      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cd2:	4b57      	ldr	r3, [pc, #348]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cde:	4b54      	ldr	r3, [pc, #336]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cee:	e006      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e004      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d06:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	4944      	ldr	r1, [pc, #272]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d17d      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d28:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a40      	ldr	r2, [pc, #256]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fe faf6 	bl	8001324 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3a:	e009      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3c:	f7fe faf2 	bl	8001324 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d4e:	e005      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d50:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ef      	bne.n	8002d3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d160      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d111      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d68:	4b31      	ldr	r3, [pc, #196]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	0211      	lsls	r1, r2, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	0912      	lsrs	r2, r2, #4
 8002d80:	0452      	lsls	r2, r2, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	492a      	ldr	r1, [pc, #168]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	610b      	str	r3, [r1, #16]
 8002d8a:	e027      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d112      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d92:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	0211      	lsls	r1, r2, #8
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6912      	ldr	r2, [r2, #16]
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0552      	lsls	r2, r2, #21
 8002dae:	430a      	orrs	r2, r1
 8002db0:	491f      	ldr	r1, [pc, #124]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
 8002db6:	e011      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6952      	ldr	r2, [r2, #20]
 8002dce:	0852      	lsrs	r2, r2, #1
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	0652      	lsls	r2, r2, #25
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fa9c 	bl	8001324 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df0:	f7fe fa98 	bl	8001324 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
          break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4904      	ldr	r1, [pc, #16]	@ (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000

08002e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e42:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e4e:	4b67      	ldr	r3, [pc, #412]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
       ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e66:	4b61      	ldr	r3, [pc, #388]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
       ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d047      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x86>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI2_Config+0x62>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI2_Config+0x74>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b55      	ldr	r3, [pc, #340]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b50      	ldr	r3, [pc, #320]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b4c      	ldr	r3, [pc, #304]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b49      	ldr	r3, [pc, #292]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eee:	4b3f      	ldr	r3, [pc, #252]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4939      	ldr	r1, [pc, #228]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d167      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f10:	4b36      	ldr	r3, [pc, #216]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fa02 	bl	8001324 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f24:	f7fe f9fe 	bl	8001324 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ef      	bne.n	8002f24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f50:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0912      	lsrs	r2, r2, #4
 8002f68:	0452      	lsls	r2, r2, #17
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	491f      	ldr	r1, [pc, #124]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	614b      	str	r3, [r1, #20]
 8002f72:	e011      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6912      	ldr	r2, [r2, #16]
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0652      	lsls	r2, r2, #25
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4916      	ldr	r1, [pc, #88]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe f9be 	bl	8001324 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fac:	f7fe f9ba 	bl	8001324 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4904      	ldr	r1, [pc, #16]	@ (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e049      	b.n	8003096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fefe 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f000 fcc2 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e049      	b.n	8003144 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f841 	bl	800314c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 fc6b 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_IC_Start_IT+0x1e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e023      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x66>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_IC_Start_IT+0x2e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e01b      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x66>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_IC_Start_IT+0x3e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e013      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x66>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Start_IT+0x4e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e00b      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x66>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0x5e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e003      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x66>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_TIM_IC_Start_IT+0x78>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e013      	b.n	8003200 <HAL_TIM_IC_Start_IT+0xa0>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d104      	bne.n	80031e8 <HAL_TIM_IC_Start_IT+0x88>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e00b      	b.n	8003200 <HAL_TIM_IC_Start_IT+0xa0>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d104      	bne.n	80031f8 <HAL_TIM_IC_Start_IT+0x98>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e003      	b.n	8003200 <HAL_TIM_IC_Start_IT+0xa0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003208:	7b7b      	ldrb	r3, [r7, #13]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0dd      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start_IT+0xc2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003220:	e023      	b.n	800326a <HAL_TIM_IC_Start_IT+0x10a>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0xd2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003230:	e01b      	b.n	800326a <HAL_TIM_IC_Start_IT+0x10a>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0xe2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003240:	e013      	b.n	800326a <HAL_TIM_IC_Start_IT+0x10a>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start_IT+0xf2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003250:	e00b      	b.n	800326a <HAL_TIM_IC_Start_IT+0x10a>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b10      	cmp	r3, #16
 8003256:	d104      	bne.n	8003262 <HAL_TIM_IC_Start_IT+0x102>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003260:	e003      	b.n	800326a <HAL_TIM_IC_Start_IT+0x10a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0x11a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003278:	e013      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x142>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0x12a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003288:	e00b      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x142>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0x13a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003298:	e003      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x142>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d841      	bhi.n	800332c <HAL_TIM_IC_Start_IT+0x1cc>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <HAL_TIM_IC_Start_IT+0x150>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	0800332d 	.word	0x0800332d
 80032bc:	0800332d 	.word	0x0800332d
 80032c0:	080032f7 	.word	0x080032f7
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	0800332d 	.word	0x0800332d
 80032d0:	08003309 	.word	0x08003309
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800331b 	.word	0x0800331b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0202 	orr.w	r2, r2, #2
 80032f2:	60da      	str	r2, [r3, #12]
      break;
 80032f4:	e01d      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0204 	orr.w	r2, r2, #4
 8003304:	60da      	str	r2, [r3, #12]
      break;
 8003306:	e014      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0208 	orr.w	r2, r2, #8
 8003316:	60da      	str	r2, [r3, #12]
      break;
 8003318:	e00b      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0210 	orr.w	r2, r2, #16
 8003328:	60da      	str	r2, [r3, #12]
      break;
 800332a:	e002      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	bf00      	nop
  }

  if (status == HAL_OK)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d149      	bne.n	80033cc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	6839      	ldr	r1, [r7, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd9d 	bl	8003e80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a23      	ldr	r2, [pc, #140]	@ (80033d8 <HAL_TIM_IC_Start_IT+0x278>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d01d      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d018      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_TIM_IC_Start_IT+0x27c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <HAL_TIM_IC_Start_IT+0x280>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1c      	ldr	r2, [pc, #112]	@ (80033e4 <HAL_TIM_IC_Start_IT+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1a      	ldr	r2, [pc, #104]	@ (80033e8 <HAL_TIM_IC_Start_IT+0x288>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_TIM_IC_Start_IT+0x22c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a19      	ldr	r2, [pc, #100]	@ (80033ec <HAL_TIM_IC_Start_IT+0x28c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d115      	bne.n	80033b8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_TIM_IC_Start_IT+0x290>)
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d015      	beq.n	80033ca <HAL_TIM_IC_Start_IT+0x26a>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a4:	d011      	beq.n	80033ca <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	e008      	b.n	80033ca <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e000      	b.n	80033cc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40013400 	.word	0x40013400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	00010007 	.word	0x00010007

080033f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa9c 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa8e 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa9f 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0204 	mvn.w	r2, #4
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa76 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa68 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa79 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0208 	mvn.w	r2, #8
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa50 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa42 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa53 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d020      	beq.n	800353c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa2a 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa1c 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa2d 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0201 	mvn.w	r2, #1
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9fa 	bl	8003954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00c      	beq.n	800358e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fd31 	bl	8003ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fd29 	bl	8004004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9e7 	bl	80039a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0220 	mvn.w	r2, #32
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fcf1 	bl	8003fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIM_IC_ConfigChannel+0x1e>
 800361c:	2302      	movs	r3, #2
 800361e:	e088      	b.n	8003732 <HAL_TIM_IC_ConfigChannel+0x130>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11b      	bne.n	8003666 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800363e:	f000 fa61 	bl	8003b04 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020c 	bic.w	r2, r2, #12
 8003650:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6999      	ldr	r1, [r3, #24]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
 8003664:	e060      	b.n	8003728 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11c      	bne.n	80036a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800367c:	f000 fadf 	bl	8003c3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800368e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	e040      	b.n	8003728 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d11b      	bne.n	80036e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80036bc:	f000 fb2c 	bl	8003d18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 020c 	bic.w	r2, r2, #12
 80036ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69d9      	ldr	r1, [r3, #28]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	61da      	str	r2, [r3, #28]
 80036e2:	e021      	b.n	8003728 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d11c      	bne.n	8003724 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036fa:	f000 fb49 	bl	8003d90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800370c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69d9      	ldr	r1, [r3, #28]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	021a      	lsls	r2, r3, #8
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	61da      	str	r2, [r3, #28]
 8003722:	e001      	b.n	8003728 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_TIM_ConfigClockSource+0x1c>
 8003752:	2302      	movs	r3, #2
 8003754:	e0b6      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x18a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003774:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003778:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003780:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003792:	d03e      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xd8>
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	f200 8087 	bhi.w	80038aa <HAL_TIM_ConfigClockSource+0x170>
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	f000 8086 	beq.w	80038b0 <HAL_TIM_ConfigClockSource+0x176>
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a8:	d87f      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037aa:	2b70      	cmp	r3, #112	@ 0x70
 80037ac:	d01a      	beq.n	80037e4 <HAL_TIM_ConfigClockSource+0xaa>
 80037ae:	2b70      	cmp	r3, #112	@ 0x70
 80037b0:	d87b      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037b2:	2b60      	cmp	r3, #96	@ 0x60
 80037b4:	d050      	beq.n	8003858 <HAL_TIM_ConfigClockSource+0x11e>
 80037b6:	2b60      	cmp	r3, #96	@ 0x60
 80037b8:	d877      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037ba:	2b50      	cmp	r3, #80	@ 0x50
 80037bc:	d03c      	beq.n	8003838 <HAL_TIM_ConfigClockSource+0xfe>
 80037be:	2b50      	cmp	r3, #80	@ 0x50
 80037c0:	d873      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d058      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0x13e>
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d86f      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037ca:	2b30      	cmp	r3, #48	@ 0x30
 80037cc:	d064      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x15e>
 80037ce:	2b30      	cmp	r3, #48	@ 0x30
 80037d0:	d86b      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d060      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x15e>
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d867      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d05c      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x15e>
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d05a      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x15e>
 80037e2:	e062      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f4:	f000 fb24 	bl	8003e40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003806:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e04f      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003822:	f000 fb0d 	bl	8003e40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003834:	609a      	str	r2, [r3, #8]
      break;
 8003836:	e03c      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003844:	461a      	mov	r2, r3
 8003846:	f000 f9cb 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2150      	movs	r1, #80	@ 0x50
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fada 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003856:	e02c      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003864:	461a      	mov	r2, r3
 8003866:	f000 fa27 	bl	8003cb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2160      	movs	r1, #96	@ 0x60
 8003870:	4618      	mov	r0, r3
 8003872:	f000 faca 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003876:	e01c      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003884:	461a      	mov	r2, r3
 8003886:	f000 f9ab 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2140      	movs	r1, #64	@ 0x40
 8003890:	4618      	mov	r0, r3
 8003892:	f000 faba 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003896:	e00c      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 fab1 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 80038a8:	e003      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      break;
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d831      	bhi.n	8003944 <HAL_TIM_ReadCapturedValue+0x78>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003945 	.word	0x08003945
 80038f0:	08003945 	.word	0x08003945
 80038f4:	08003945 	.word	0x08003945
 80038f8:	08003927 	.word	0x08003927
 80038fc:	08003945 	.word	0x08003945
 8003900:	08003945 	.word	0x08003945
 8003904:	08003945 	.word	0x08003945
 8003908:	08003931 	.word	0x08003931
 800390c:	08003945 	.word	0x08003945
 8003910:	08003945 	.word	0x08003945
 8003914:	08003945 	.word	0x08003945
 8003918:	0800393b 	.word	0x0800393b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003922:	60fb      	str	r3, [r7, #12]

      break;
 8003924:	e00f      	b.n	8003946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	60fb      	str	r3, [r7, #12]

      break;
 800392e:	e00a      	b.n	8003946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	60fb      	str	r3, [r7, #12]

      break;
 8003938:	e005      	b.n	8003946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	60fb      	str	r3, [r7, #12]

      break;
 8003942:	e000      	b.n	8003946 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003944:	bf00      	nop
  }

  return tmpreg;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a46      	ldr	r2, [pc, #280]	@ (8003ae4 <TIM_Base_SetConfig+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d6:	d00f      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a43      	ldr	r2, [pc, #268]	@ (8003ae8 <TIM_Base_SetConfig+0x130>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a42      	ldr	r2, [pc, #264]	@ (8003aec <TIM_Base_SetConfig+0x134>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d007      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a41      	ldr	r2, [pc, #260]	@ (8003af0 <TIM_Base_SetConfig+0x138>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a40      	ldr	r2, [pc, #256]	@ (8003af4 <TIM_Base_SetConfig+0x13c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <TIM_Base_SetConfig+0x12c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01f      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a18:	d01b      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ae8 <TIM_Base_SetConfig+0x130>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d017      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a31      	ldr	r2, [pc, #196]	@ (8003aec <TIM_Base_SetConfig+0x134>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	@ (8003af0 <TIM_Base_SetConfig+0x138>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <TIM_Base_SetConfig+0x13c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003af8 <TIM_Base_SetConfig+0x140>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2d      	ldr	r2, [pc, #180]	@ (8003afc <TIM_Base_SetConfig+0x144>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b00 <TIM_Base_SetConfig+0x148>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	@ (8003ae4 <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00f      	beq.n	8003ab0 <TIM_Base_SetConfig+0xf8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <TIM_Base_SetConfig+0x13c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00b      	beq.n	8003ab0 <TIM_Base_SetConfig+0xf8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <TIM_Base_SetConfig+0x140>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_Base_SetConfig+0xf8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <TIM_Base_SetConfig+0x144>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0xf8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <TIM_Base_SetConfig+0x148>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800

08003b04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 0201 	bic.w	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	@ (8003bc8 <TIM_TI1_SetConfig+0xc4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d017      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b38:	d013      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <TIM_TI1_SetConfig+0xc8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00f      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a22      	ldr	r2, [pc, #136]	@ (8003bd0 <TIM_TI1_SetConfig+0xcc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00b      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <TIM_TI1_SetConfig+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a20      	ldr	r2, [pc, #128]	@ (8003bd8 <TIM_TI1_SetConfig+0xd4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <TIM_TI1_SetConfig+0x5e>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bdc <TIM_TI1_SetConfig+0xd8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <TIM_TI1_SetConfig+0x62>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <TIM_TI1_SetConfig+0x64>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e003      	b.n	8003b86 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f023 030a 	bic.w	r3, r3, #10
 8003ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 030a 	and.w	r3, r3, #10
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40013400 	.word	0x40013400
 8003bdc:	40014000 	.word	0x40014000

08003be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 030a 	bic.w	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0210 	bic.w	r2, r3, #16
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	031b      	lsls	r3, r3, #12
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	031b      	lsls	r3, r3, #12
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f043 0307 	orr.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2201      	movs	r2, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1a      	ldr	r2, [r3, #32]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e068      	b.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d018      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10c      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40013400 	.word	0x40013400
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40014000 	.word	0x40014000

08003fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e040      	b.n	80040ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc ff34 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	@ 0x24
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fe90 	bl	8004d84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fbd5 	bl	8004814 <UART_SetConfig>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 ff0f 	bl	8004ec8 <UART_CheckIdleState>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d177      	bne.n	80041bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Transmit+0x24>
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e070      	b.n	80041be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	@ 0x21
 80040e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ea:	f7fd f91b 	bl	8001324 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x68>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004124:	e02f      	b.n	8004186 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	@ 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 ff71 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03b      	b.n	80041be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004158:	b292      	uxth	r2, r2
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3302      	adds	r3, #2
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e007      	b.n	8004174 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1c9      	bne.n	8004126 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	@ 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 ff3b 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e005      	b.n	80041be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b0ba      	sub	sp, #232	@ 0xe8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041f6:	4013      	ands	r3, r2
 80041f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d115      	bne.n	8004230 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 82ca 	beq.w	80047ba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
      }
      return;
 800422e:	e2c4      	b.n	80047ba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8117 	beq.w	8004468 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800424a:	4b85      	ldr	r3, [pc, #532]	@ (8004460 <HAL_UART_IRQHandler+0x298>)
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 810a 	beq.w	8004468 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <HAL_UART_IRQHandler+0xbc>
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d011      	beq.n	80042b4 <HAL_UART_IRQHandler+0xec>
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
 80042c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2204      	movs	r2, #4
 80042d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042da:	f043 0202 	orr.w	r2, r3, #2
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004300:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004316:	f043 0208 	orr.w	r2, r3, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d012      	beq.n	8004352 <HAL_UART_IRQHandler+0x18a>
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8230 	beq.w	80047be <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b40      	cmp	r3, #64	@ 0x40
 800439c:	d005      	beq.n	80043aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800439e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04f      	beq.n	800444a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fea1 	bl	80050f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d141      	bne.n	8004442 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d9      	bne.n	80043be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440e:	2b00      	cmp	r3, #0
 8004410:	d013      	beq.n	800443a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <HAL_UART_IRQHandler+0x29c>)
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd f8db 	bl	80015da <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d017      	beq.n	800445a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00f      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9d4 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00b      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9d0 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e007      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9cc 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004458:	e1b1      	b.n	80047be <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	bf00      	nop
    return;
 800445c:	e1af      	b.n	80047be <HAL_UART_IRQHandler+0x5f6>
 800445e:	bf00      	nop
 8004460:	04000120 	.word	0x04000120
 8004464:	080051bb 	.word	0x080051bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 816a 	bne.w	8004746 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8163 	beq.w	8004746 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 815c 	beq.w	8004746 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2210      	movs	r2, #16
 8004494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	f040 80d4 	bne.w	800464e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80ad 	beq.w	8004616 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f080 80a5 	bcs.w	8004616 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8086 	bne.w	80045f4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004516:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800451e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800452a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1da      	bne.n	80044e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004556:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800455a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800455e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e1      	bne.n	8004532 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800457e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004592:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004594:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004598:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e3      	bne.n	800456e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c4:	f023 0310 	bic.w	r3, r3, #16
 80045c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e4      	bne.n	80045b4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc ffb5 	bl	800155e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b29b      	uxth	r3, r3
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8f4 	bl	80047fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004614:	e0d5      	b.n	80047c2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800461c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004620:	429a      	cmp	r2, r3
 8004622:	f040 80ce 	bne.w	80047c2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b20      	cmp	r3, #32
 8004634:	f040 80c5 	bne.w	80047c2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8d8 	bl	80047fc <HAL_UARTEx_RxEventCallback>
      return;
 800464c:	e0b9      	b.n	80047c2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800465a:	b29b      	uxth	r3, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80ab 	beq.w	80047c6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80a6 	beq.w	80047c6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800468e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800469c:	647b      	str	r3, [r7, #68]	@ 0x44
 800469e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	623b      	str	r3, [r7, #32]
   return(result);
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e3      	bne.n	80046b0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	617b      	str	r3, [r7, #20]
   return(result);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e4      	bne.n	80046fc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f85c 	bl	80047fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004744:	e03f      	b.n	80047c6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00e      	beq.n	8004770 <HAL_UART_IRQHandler+0x5a8>
 8004752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fd66 	bl	800523a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800476e:	e02d      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
    }
    return;
 8004798:	e017      	b.n	80047ca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <HAL_UART_IRQHandler+0x604>
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fd17 	bl	80051e6 <UART_EndTransmit_IT>
    return;
 80047b8:	e008      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
      return;
 80047ba:	bf00      	nop
 80047bc:	e006      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
    return;
 80047be:	bf00      	nop
 80047c0:	e004      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
      return;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
      return;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_UART_IRQHandler+0x604>
    return;
 80047ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047cc:	37e8      	adds	r7, #232	@ 0xe8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop

080047d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004818:	b08a      	sub	sp, #40	@ 0x28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	431a      	orrs	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	4313      	orrs	r3, r2
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad4 <UART_SetConfig+0x2c0>)
 8004844:	4013      	ands	r3, r2
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800484c:	430b      	orrs	r3, r1
 800484e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a99      	ldr	r2, [pc, #612]	@ (8004ad8 <UART_SetConfig+0x2c4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487c:	4313      	orrs	r3, r2
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a90      	ldr	r2, [pc, #576]	@ (8004adc <UART_SetConfig+0x2c8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d126      	bne.n	80048ec <UART_SetConfig+0xd8>
 800489e:	4b90      	ldr	r3, [pc, #576]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d81b      	bhi.n	80048e4 <UART_SetConfig+0xd0>
 80048ac:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <UART_SetConfig+0xa0>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e116      	b.n	8004afa <UART_SetConfig+0x2e6>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e112      	b.n	8004afa <UART_SetConfig+0x2e6>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e10e      	b.n	8004afa <UART_SetConfig+0x2e6>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e10a      	b.n	8004afa <UART_SetConfig+0x2e6>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e106      	b.n	8004afa <UART_SetConfig+0x2e6>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae4 <UART_SetConfig+0x2d0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d138      	bne.n	8004968 <UART_SetConfig+0x154>
 80048f6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f003 030c 	and.w	r3, r3, #12
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d82d      	bhi.n	8004960 <UART_SetConfig+0x14c>
 8004904:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0xf8>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004941 	.word	0x08004941
 8004910:	08004961 	.word	0x08004961
 8004914:	08004961 	.word	0x08004961
 8004918:	08004961 	.word	0x08004961
 800491c:	08004951 	.word	0x08004951
 8004920:	08004961 	.word	0x08004961
 8004924:	08004961 	.word	0x08004961
 8004928:	08004961 	.word	0x08004961
 800492c:	08004949 	.word	0x08004949
 8004930:	08004961 	.word	0x08004961
 8004934:	08004961 	.word	0x08004961
 8004938:	08004961 	.word	0x08004961
 800493c:	08004959 	.word	0x08004959
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e0d8      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004948:	2302      	movs	r3, #2
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e0d4      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e0d0      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e0cc      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004966:	e0c8      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae8 <UART_SetConfig+0x2d4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d125      	bne.n	80049be <UART_SetConfig+0x1aa>
 8004972:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d016      	beq.n	80049ae <UART_SetConfig+0x19a>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d818      	bhi.n	80049b6 <UART_SetConfig+0x1a2>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d00a      	beq.n	800499e <UART_SetConfig+0x18a>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d814      	bhi.n	80049b6 <UART_SetConfig+0x1a2>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <UART_SetConfig+0x182>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d008      	beq.n	80049a6 <UART_SetConfig+0x192>
 8004994:	e00f      	b.n	80049b6 <UART_SetConfig+0x1a2>
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499c:	e0ad      	b.n	8004afa <UART_SetConfig+0x2e6>
 800499e:	2302      	movs	r3, #2
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a4:	e0a9      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049a6:	2304      	movs	r3, #4
 80049a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ac:	e0a5      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049ae:	2308      	movs	r3, #8
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b4:	e0a1      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049b6:	2310      	movs	r3, #16
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049bc:	e09d      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a4a      	ldr	r2, [pc, #296]	@ (8004aec <UART_SetConfig+0x2d8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d125      	bne.n	8004a14 <UART_SetConfig+0x200>
 80049c8:	4b45      	ldr	r3, [pc, #276]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d4:	d016      	beq.n	8004a04 <UART_SetConfig+0x1f0>
 80049d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d8:	d818      	bhi.n	8004a0c <UART_SetConfig+0x1f8>
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d00a      	beq.n	80049f4 <UART_SetConfig+0x1e0>
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d814      	bhi.n	8004a0c <UART_SetConfig+0x1f8>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <UART_SetConfig+0x1d8>
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d008      	beq.n	80049fc <UART_SetConfig+0x1e8>
 80049ea:	e00f      	b.n	8004a0c <UART_SetConfig+0x1f8>
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e082      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e07e      	b.n	8004afa <UART_SetConfig+0x2e6>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a02:	e07a      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e076      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e072      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a35      	ldr	r2, [pc, #212]	@ (8004af0 <UART_SetConfig+0x2dc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d12a      	bne.n	8004a74 <UART_SetConfig+0x260>
 8004a1e:	4b30      	ldr	r3, [pc, #192]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2c:	d01a      	beq.n	8004a64 <UART_SetConfig+0x250>
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a32:	d81b      	bhi.n	8004a6c <UART_SetConfig+0x258>
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a38:	d00c      	beq.n	8004a54 <UART_SetConfig+0x240>
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3e:	d815      	bhi.n	8004a6c <UART_SetConfig+0x258>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <UART_SetConfig+0x238>
 8004a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a48:	d008      	beq.n	8004a5c <UART_SetConfig+0x248>
 8004a4a:	e00f      	b.n	8004a6c <UART_SetConfig+0x258>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e052      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a54:	2302      	movs	r3, #2
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5a:	e04e      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e04a      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a64:	2308      	movs	r3, #8
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e046      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e042      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <UART_SetConfig+0x2c4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d13a      	bne.n	8004af4 <UART_SetConfig+0x2e0>
 8004a7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ae0 <UART_SetConfig+0x2cc>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a8c:	d01a      	beq.n	8004ac4 <UART_SetConfig+0x2b0>
 8004a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a92:	d81b      	bhi.n	8004acc <UART_SetConfig+0x2b8>
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d00c      	beq.n	8004ab4 <UART_SetConfig+0x2a0>
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9e:	d815      	bhi.n	8004acc <UART_SetConfig+0x2b8>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <UART_SetConfig+0x298>
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa8:	d008      	beq.n	8004abc <UART_SetConfig+0x2a8>
 8004aaa:	e00f      	b.n	8004acc <UART_SetConfig+0x2b8>
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab2:	e022      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aba:	e01e      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e01a      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e016      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e012      	b.n	8004afa <UART_SetConfig+0x2e6>
 8004ad4:	efff69f3 	.word	0xefff69f3
 8004ad8:	40008000 	.word	0x40008000
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40004400 	.word	0x40004400
 8004ae8:	40004800 	.word	0x40004800
 8004aec:	40004c00 	.word	0x40004c00
 8004af0:	40005000 	.word	0x40005000
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a9f      	ldr	r2, [pc, #636]	@ (8004d7c <UART_SetConfig+0x568>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d17a      	bne.n	8004bfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d824      	bhi.n	8004b56 <UART_SetConfig+0x342>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <UART_SetConfig+0x300>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b47 	.word	0x08004b47
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b57 	.word	0x08004b57
 8004b30:	08004b57 	.word	0x08004b57
 8004b34:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fd fd12 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b8f      	ldr	r3, [pc, #572]	@ (8004d80 <UART_SetConfig+0x56c>)
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fd fc73 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61f8      	str	r0, [r7, #28]
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	61fb      	str	r3, [r7, #28]
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80fb 	beq.w	8004d60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d305      	bcc.n	8004b86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d903      	bls.n	8004b8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b8c:	e0e8      	b.n	8004d60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2200      	movs	r2, #0
 8004b92:	461c      	mov	r4, r3
 8004b94:	4615      	mov	r5, r2
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	022b      	lsls	r3, r5, #8
 8004ba0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ba4:	0222      	lsls	r2, r4, #8
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6849      	ldr	r1, [r1, #4]
 8004baa:	0849      	lsrs	r1, r1, #1
 8004bac:	2000      	movs	r0, #0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	4681      	mov	r9, r0
 8004bb2:	eb12 0a08 	adds.w	sl, r2, r8
 8004bb6:	eb43 0b09 	adc.w	fp, r3, r9
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc8:	4650      	mov	r0, sl
 8004bca:	4659      	mov	r1, fp
 8004bcc:	f7fb fe5e 	bl	800088c <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bde:	d308      	bcc.n	8004bf2 <UART_SetConfig+0x3de>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004be6:	d204      	bcs.n	8004bf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	60da      	str	r2, [r3, #12]
 8004bf0:	e0b6      	b.n	8004d60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bf8:	e0b2      	b.n	8004d60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c02:	d15e      	bne.n	8004cc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d828      	bhi.n	8004c5e <UART_SetConfig+0x44a>
 8004c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c14 <UART_SetConfig+0x400>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c49 	.word	0x08004c49
 8004c20:	08004c5f 	.word	0x08004c5f
 8004c24:	08004c4f 	.word	0x08004c4f
 8004c28:	08004c5f 	.word	0x08004c5f
 8004c2c:	08004c5f 	.word	0x08004c5f
 8004c30:	08004c5f 	.word	0x08004c5f
 8004c34:	08004c57 	.word	0x08004c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fd fc92 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	61f8      	str	r0, [r7, #28]
        break;
 8004c3e:	e014      	b.n	8004c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7fd fca4 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e010      	b.n	8004c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c48:	4b4d      	ldr	r3, [pc, #308]	@ (8004d80 <UART_SetConfig+0x56c>)
 8004c4a:	61fb      	str	r3, [r7, #28]
        break;
 8004c4c:	e00d      	b.n	8004c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4e:	f7fd fbef 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004c52:	61f8      	str	r0, [r7, #28]
        break;
 8004c54:	e009      	b.n	8004c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5a:	61fb      	str	r3, [r7, #28]
        break;
 8004c5c:	e005      	b.n	8004c6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d077      	beq.n	8004d60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005a      	lsls	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d916      	bls.n	8004cba <UART_SetConfig+0x4a6>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c92:	d212      	bcs.n	8004cba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f023 030f 	bic.w	r3, r3, #15
 8004c9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	8afb      	ldrh	r3, [r7, #22]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	8afa      	ldrh	r2, [r7, #22]
 8004cb6:	60da      	str	r2, [r3, #12]
 8004cb8:	e052      	b.n	8004d60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cc0:	e04e      	b.n	8004d60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d827      	bhi.n	8004d1a <UART_SetConfig+0x506>
 8004cca:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd0 <UART_SetConfig+0x4bc>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d1b 	.word	0x08004d1b
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004d1b 	.word	0x08004d1b
 8004ce8:	08004d1b 	.word	0x08004d1b
 8004cec:	08004d1b 	.word	0x08004d1b
 8004cf0:	08004d13 	.word	0x08004d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf4:	f7fd fc34 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8004cf8:	61f8      	str	r0, [r7, #28]
        break;
 8004cfa:	e014      	b.n	8004d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7fd fc46 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8004d00:	61f8      	str	r0, [r7, #28]
        break;
 8004d02:	e010      	b.n	8004d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d04:	4b1e      	ldr	r3, [pc, #120]	@ (8004d80 <UART_SetConfig+0x56c>)
 8004d06:	61fb      	str	r3, [r7, #28]
        break;
 8004d08:	e00d      	b.n	8004d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7fd fb91 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004d0e:	61f8      	str	r0, [r7, #28]
        break;
 8004d10:	e009      	b.n	8004d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d16:	61fb      	str	r3, [r7, #28]
        break;
 8004d18:	e005      	b.n	8004d26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d24:	bf00      	nop
    }

    if (pclk != 0U)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d019      	beq.n	8004d60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	085a      	lsrs	r2, r3, #1
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	441a      	add	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b0f      	cmp	r3, #15
 8004d44:	d909      	bls.n	8004d5a <UART_SetConfig+0x546>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4c:	d205      	bcs.n	8004d5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e002      	b.n	8004d60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	@ 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40008000 	.word	0x40008000
 8004d80:	00f42400 	.word	0x00f42400

08004d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01a      	beq.n	8004e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e82:	d10a      	bne.n	8004e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b098      	sub	sp, #96	@ 0x60
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed8:	f7fc fa24 	bl	8001324 <HAL_GetTick>
 8004edc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d12e      	bne.n	8004f4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f88c 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d021      	beq.n	8004f4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e062      	b.n	8005010 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d149      	bne.n	8004fec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	2200      	movs	r2, #0
 8004f62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f856 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d03c      	beq.n	8004fec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc4:	61fa      	str	r2, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e011      	b.n	8005010 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3758      	adds	r7, #88	@ 0x58
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005028:	e04f      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005030:	d04b      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fc f977 	bl	8001324 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <UART_WaitOnFlagUntilTimeout+0x30>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e04e      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d037      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b80      	cmp	r3, #128	@ 0x80
 800505e:	d034      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	d031      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d110      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2208      	movs	r2, #8
 800507a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f838 	bl	80050f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2208      	movs	r2, #8
 8005086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e029      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a4:	d111      	bne.n	80050ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f81e 	bl	80050f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e00f      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d0a0      	beq.n	800502a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b095      	sub	sp, #84	@ 0x54
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005118:	643b      	str	r3, [r7, #64]	@ 0x40
 800511a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e6      	bne.n	80050fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	61fb      	str	r3, [r7, #28]
   return(result);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005164:	2b01      	cmp	r3, #1
 8005166:	d118      	bne.n	800519a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	60bb      	str	r3, [r7, #8]
   return(result);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	647b      	str	r3, [r7, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	613b      	str	r3, [r7, #16]
   return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e6      	bne.n	8005168 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051ae:	bf00      	nop
 80051b0:	3754      	adds	r7, #84	@ 0x54
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff fb05 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	613b      	str	r3, [r7, #16]
   return(result);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff fad1 	bl	80047d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005232:	bf00      	nop
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <siprintf>:
 8005250:	b40e      	push	{r1, r2, r3}
 8005252:	b500      	push	{lr}
 8005254:	b09c      	sub	sp, #112	@ 0x70
 8005256:	ab1d      	add	r3, sp, #116	@ 0x74
 8005258:	9002      	str	r0, [sp, #8]
 800525a:	9006      	str	r0, [sp, #24]
 800525c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005260:	4809      	ldr	r0, [pc, #36]	@ (8005288 <siprintf+0x38>)
 8005262:	9107      	str	r1, [sp, #28]
 8005264:	9104      	str	r1, [sp, #16]
 8005266:	4909      	ldr	r1, [pc, #36]	@ (800528c <siprintf+0x3c>)
 8005268:	f853 2b04 	ldr.w	r2, [r3], #4
 800526c:	9105      	str	r1, [sp, #20]
 800526e:	6800      	ldr	r0, [r0, #0]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	a902      	add	r1, sp, #8
 8005274:	f000 f89c 	bl	80053b0 <_svfiprintf_r>
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	b01c      	add	sp, #112	@ 0x70
 8005280:	f85d eb04 	ldr.w	lr, [sp], #4
 8005284:	b003      	add	sp, #12
 8005286:	4770      	bx	lr
 8005288:	2000000c 	.word	0x2000000c
 800528c:	ffff0208 	.word	0xffff0208

08005290 <memset>:
 8005290:	4402      	add	r2, r0
 8005292:	4603      	mov	r3, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <__errno>:
 80052a0:	4b01      	ldr	r3, [pc, #4]	@ (80052a8 <__errno+0x8>)
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	2000000c 	.word	0x2000000c

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4d0d      	ldr	r5, [pc, #52]	@ (80052e4 <__libc_init_array+0x38>)
 80052b0:	4c0d      	ldr	r4, [pc, #52]	@ (80052e8 <__libc_init_array+0x3c>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	2600      	movs	r6, #0
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	4d0b      	ldr	r5, [pc, #44]	@ (80052ec <__libc_init_array+0x40>)
 80052be:	4c0c      	ldr	r4, [pc, #48]	@ (80052f0 <__libc_init_array+0x44>)
 80052c0:	f000 fc66 	bl	8005b90 <_init>
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	2600      	movs	r6, #0
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	f855 3b04 	ldr.w	r3, [r5], #4
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	08005c70 	.word	0x08005c70
 80052e8:	08005c70 	.word	0x08005c70
 80052ec:	08005c70 	.word	0x08005c70
 80052f0:	08005c74 	.word	0x08005c74

080052f4 <__retarget_lock_acquire_recursive>:
 80052f4:	4770      	bx	lr

080052f6 <__retarget_lock_release_recursive>:
 80052f6:	4770      	bx	lr

080052f8 <__ssputs_r>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	688e      	ldr	r6, [r1, #8]
 80052fe:	461f      	mov	r7, r3
 8005300:	42be      	cmp	r6, r7
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	4682      	mov	sl, r0
 8005306:	460c      	mov	r4, r1
 8005308:	4690      	mov	r8, r2
 800530a:	d82d      	bhi.n	8005368 <__ssputs_r+0x70>
 800530c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005310:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005314:	d026      	beq.n	8005364 <__ssputs_r+0x6c>
 8005316:	6965      	ldr	r5, [r4, #20]
 8005318:	6909      	ldr	r1, [r1, #16]
 800531a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800531e:	eba3 0901 	sub.w	r9, r3, r1
 8005322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005326:	1c7b      	adds	r3, r7, #1
 8005328:	444b      	add	r3, r9
 800532a:	106d      	asrs	r5, r5, #1
 800532c:	429d      	cmp	r5, r3
 800532e:	bf38      	it	cc
 8005330:	461d      	movcc	r5, r3
 8005332:	0553      	lsls	r3, r2, #21
 8005334:	d527      	bpl.n	8005386 <__ssputs_r+0x8e>
 8005336:	4629      	mov	r1, r5
 8005338:	f000 f958 	bl	80055ec <_malloc_r>
 800533c:	4606      	mov	r6, r0
 800533e:	b360      	cbz	r0, 800539a <__ssputs_r+0xa2>
 8005340:	6921      	ldr	r1, [r4, #16]
 8005342:	464a      	mov	r2, r9
 8005344:	f000 fbc4 	bl	8005ad0 <memcpy>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800534e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	6126      	str	r6, [r4, #16]
 8005356:	6165      	str	r5, [r4, #20]
 8005358:	444e      	add	r6, r9
 800535a:	eba5 0509 	sub.w	r5, r5, r9
 800535e:	6026      	str	r6, [r4, #0]
 8005360:	60a5      	str	r5, [r4, #8]
 8005362:	463e      	mov	r6, r7
 8005364:	42be      	cmp	r6, r7
 8005366:	d900      	bls.n	800536a <__ssputs_r+0x72>
 8005368:	463e      	mov	r6, r7
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	4632      	mov	r2, r6
 800536e:	4641      	mov	r1, r8
 8005370:	f000 fb84 	bl	8005a7c <memmove>
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	1b9b      	subs	r3, r3, r6
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4433      	add	r3, r6
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2000      	movs	r0, #0
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	462a      	mov	r2, r5
 8005388:	f000 fb4a 	bl	8005a20 <_realloc_r>
 800538c:	4606      	mov	r6, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d1e0      	bne.n	8005354 <__ssputs_r+0x5c>
 8005392:	6921      	ldr	r1, [r4, #16]
 8005394:	4650      	mov	r0, sl
 8005396:	f000 fba9 	bl	8005aec <_free_r>
 800539a:	230c      	movs	r3, #12
 800539c:	f8ca 3000 	str.w	r3, [sl]
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053ac:	e7e9      	b.n	8005382 <__ssputs_r+0x8a>
	...

080053b0 <_svfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	4698      	mov	r8, r3
 80053b6:	898b      	ldrh	r3, [r1, #12]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	b09d      	sub	sp, #116	@ 0x74
 80053bc:	4607      	mov	r7, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	d510      	bpl.n	80053e6 <_svfiprintf_r+0x36>
 80053c4:	690b      	ldr	r3, [r1, #16]
 80053c6:	b973      	cbnz	r3, 80053e6 <_svfiprintf_r+0x36>
 80053c8:	2140      	movs	r1, #64	@ 0x40
 80053ca:	f000 f90f 	bl	80055ec <_malloc_r>
 80053ce:	6028      	str	r0, [r5, #0]
 80053d0:	6128      	str	r0, [r5, #16]
 80053d2:	b930      	cbnz	r0, 80053e2 <_svfiprintf_r+0x32>
 80053d4:	230c      	movs	r3, #12
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053dc:	b01d      	add	sp, #116	@ 0x74
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	2340      	movs	r3, #64	@ 0x40
 80053e4:	616b      	str	r3, [r5, #20]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ea:	2320      	movs	r3, #32
 80053ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f4:	2330      	movs	r3, #48	@ 0x30
 80053f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005594 <_svfiprintf_r+0x1e4>
 80053fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053fe:	f04f 0901 	mov.w	r9, #1
 8005402:	4623      	mov	r3, r4
 8005404:	469a      	mov	sl, r3
 8005406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800540a:	b10a      	cbz	r2, 8005410 <_svfiprintf_r+0x60>
 800540c:	2a25      	cmp	r2, #37	@ 0x25
 800540e:	d1f9      	bne.n	8005404 <_svfiprintf_r+0x54>
 8005410:	ebba 0b04 	subs.w	fp, sl, r4
 8005414:	d00b      	beq.n	800542e <_svfiprintf_r+0x7e>
 8005416:	465b      	mov	r3, fp
 8005418:	4622      	mov	r2, r4
 800541a:	4629      	mov	r1, r5
 800541c:	4638      	mov	r0, r7
 800541e:	f7ff ff6b 	bl	80052f8 <__ssputs_r>
 8005422:	3001      	adds	r0, #1
 8005424:	f000 80a7 	beq.w	8005576 <_svfiprintf_r+0x1c6>
 8005428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800542a:	445a      	add	r2, fp
 800542c:	9209      	str	r2, [sp, #36]	@ 0x24
 800542e:	f89a 3000 	ldrb.w	r3, [sl]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 809f 	beq.w	8005576 <_svfiprintf_r+0x1c6>
 8005438:	2300      	movs	r3, #0
 800543a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800543e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005442:	f10a 0a01 	add.w	sl, sl, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800544e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005450:	4654      	mov	r4, sl
 8005452:	2205      	movs	r2, #5
 8005454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005458:	484e      	ldr	r0, [pc, #312]	@ (8005594 <_svfiprintf_r+0x1e4>)
 800545a:	f7fa fec1 	bl	80001e0 <memchr>
 800545e:	9a04      	ldr	r2, [sp, #16]
 8005460:	b9d8      	cbnz	r0, 800549a <_svfiprintf_r+0xea>
 8005462:	06d0      	lsls	r0, r2, #27
 8005464:	bf44      	itt	mi
 8005466:	2320      	movmi	r3, #32
 8005468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800546c:	0711      	lsls	r1, r2, #28
 800546e:	bf44      	itt	mi
 8005470:	232b      	movmi	r3, #43	@ 0x2b
 8005472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b2a      	cmp	r3, #42	@ 0x2a
 800547c:	d015      	beq.n	80054aa <_svfiprintf_r+0xfa>
 800547e:	9a07      	ldr	r2, [sp, #28]
 8005480:	4654      	mov	r4, sl
 8005482:	2000      	movs	r0, #0
 8005484:	f04f 0c0a 	mov.w	ip, #10
 8005488:	4621      	mov	r1, r4
 800548a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548e:	3b30      	subs	r3, #48	@ 0x30
 8005490:	2b09      	cmp	r3, #9
 8005492:	d94b      	bls.n	800552c <_svfiprintf_r+0x17c>
 8005494:	b1b0      	cbz	r0, 80054c4 <_svfiprintf_r+0x114>
 8005496:	9207      	str	r2, [sp, #28]
 8005498:	e014      	b.n	80054c4 <_svfiprintf_r+0x114>
 800549a:	eba0 0308 	sub.w	r3, r0, r8
 800549e:	fa09 f303 	lsl.w	r3, r9, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	46a2      	mov	sl, r4
 80054a8:	e7d2      	b.n	8005450 <_svfiprintf_r+0xa0>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	9103      	str	r1, [sp, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfbb      	ittet	lt
 80054b6:	425b      	neglt	r3, r3
 80054b8:	f042 0202 	orrlt.w	r2, r2, #2
 80054bc:	9307      	strge	r3, [sp, #28]
 80054be:	9307      	strlt	r3, [sp, #28]
 80054c0:	bfb8      	it	lt
 80054c2:	9204      	strlt	r2, [sp, #16]
 80054c4:	7823      	ldrb	r3, [r4, #0]
 80054c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80054c8:	d10a      	bne.n	80054e0 <_svfiprintf_r+0x130>
 80054ca:	7863      	ldrb	r3, [r4, #1]
 80054cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ce:	d132      	bne.n	8005536 <_svfiprintf_r+0x186>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9203      	str	r2, [sp, #12]
 80054d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054dc:	3402      	adds	r4, #2
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055a4 <_svfiprintf_r+0x1f4>
 80054e4:	7821      	ldrb	r1, [r4, #0]
 80054e6:	2203      	movs	r2, #3
 80054e8:	4650      	mov	r0, sl
 80054ea:	f7fa fe79 	bl	80001e0 <memchr>
 80054ee:	b138      	cbz	r0, 8005500 <_svfiprintf_r+0x150>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	eba0 000a 	sub.w	r0, r0, sl
 80054f6:	2240      	movs	r2, #64	@ 0x40
 80054f8:	4082      	lsls	r2, r0
 80054fa:	4313      	orrs	r3, r2
 80054fc:	3401      	adds	r4, #1
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005504:	4824      	ldr	r0, [pc, #144]	@ (8005598 <_svfiprintf_r+0x1e8>)
 8005506:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800550a:	2206      	movs	r2, #6
 800550c:	f7fa fe68 	bl	80001e0 <memchr>
 8005510:	2800      	cmp	r0, #0
 8005512:	d036      	beq.n	8005582 <_svfiprintf_r+0x1d2>
 8005514:	4b21      	ldr	r3, [pc, #132]	@ (800559c <_svfiprintf_r+0x1ec>)
 8005516:	bb1b      	cbnz	r3, 8005560 <_svfiprintf_r+0x1b0>
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	3307      	adds	r3, #7
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	9303      	str	r3, [sp, #12]
 8005524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005526:	4433      	add	r3, r6
 8005528:	9309      	str	r3, [sp, #36]	@ 0x24
 800552a:	e76a      	b.n	8005402 <_svfiprintf_r+0x52>
 800552c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005530:	460c      	mov	r4, r1
 8005532:	2001      	movs	r0, #1
 8005534:	e7a8      	b.n	8005488 <_svfiprintf_r+0xd8>
 8005536:	2300      	movs	r3, #0
 8005538:	3401      	adds	r4, #1
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	4619      	mov	r1, r3
 800553e:	f04f 0c0a 	mov.w	ip, #10
 8005542:	4620      	mov	r0, r4
 8005544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005548:	3a30      	subs	r2, #48	@ 0x30
 800554a:	2a09      	cmp	r2, #9
 800554c:	d903      	bls.n	8005556 <_svfiprintf_r+0x1a6>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0c6      	beq.n	80054e0 <_svfiprintf_r+0x130>
 8005552:	9105      	str	r1, [sp, #20]
 8005554:	e7c4      	b.n	80054e0 <_svfiprintf_r+0x130>
 8005556:	fb0c 2101 	mla	r1, ip, r1, r2
 800555a:	4604      	mov	r4, r0
 800555c:	2301      	movs	r3, #1
 800555e:	e7f0      	b.n	8005542 <_svfiprintf_r+0x192>
 8005560:	ab03      	add	r3, sp, #12
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	462a      	mov	r2, r5
 8005566:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <_svfiprintf_r+0x1f0>)
 8005568:	a904      	add	r1, sp, #16
 800556a:	4638      	mov	r0, r7
 800556c:	f3af 8000 	nop.w
 8005570:	1c42      	adds	r2, r0, #1
 8005572:	4606      	mov	r6, r0
 8005574:	d1d6      	bne.n	8005524 <_svfiprintf_r+0x174>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	065b      	lsls	r3, r3, #25
 800557a:	f53f af2d 	bmi.w	80053d8 <_svfiprintf_r+0x28>
 800557e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005580:	e72c      	b.n	80053dc <_svfiprintf_r+0x2c>
 8005582:	ab03      	add	r3, sp, #12
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462a      	mov	r2, r5
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <_svfiprintf_r+0x1f0>)
 800558a:	a904      	add	r1, sp, #16
 800558c:	4638      	mov	r0, r7
 800558e:	f000 f91b 	bl	80057c8 <_printf_i>
 8005592:	e7ed      	b.n	8005570 <_svfiprintf_r+0x1c0>
 8005594:	08005c34 	.word	0x08005c34
 8005598:	08005c3e 	.word	0x08005c3e
 800559c:	00000000 	.word	0x00000000
 80055a0:	080052f9 	.word	0x080052f9
 80055a4:	08005c3a 	.word	0x08005c3a

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0f      	ldr	r6, [pc, #60]	@ (80055e8 <sbrk_aligned+0x40>)
 80055ac:	460c      	mov	r4, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	b911      	cbnz	r1, 80055ba <sbrk_aligned+0x12>
 80055b4:	f000 fa7c 	bl	8005ab0 <_sbrk_r>
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 fa77 	bl	8005ab0 <_sbrk_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d103      	bne.n	80055ce <sbrk_aligned+0x26>
 80055c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80055ca:	4620      	mov	r0, r4
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d0f8      	beq.n	80055ca <sbrk_aligned+0x22>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fa68 	bl	8005ab0 <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d1f2      	bne.n	80055ca <sbrk_aligned+0x22>
 80055e4:	e7ef      	b.n	80055c6 <sbrk_aligned+0x1e>
 80055e6:	bf00      	nop
 80055e8:	200002a4 	.word	0x200002a4

080055ec <_malloc_r>:
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f0:	1ccd      	adds	r5, r1, #3
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	2d00      	cmp	r5, #0
 8005600:	4606      	mov	r6, r0
 8005602:	db01      	blt.n	8005608 <_malloc_r+0x1c>
 8005604:	42a9      	cmp	r1, r5
 8005606:	d904      	bls.n	8005612 <_malloc_r+0x26>
 8005608:	230c      	movs	r3, #12
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	2000      	movs	r0, #0
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e8 <_malloc_r+0xfc>
 8005616:	f000 f9f7 	bl	8005a08 <__malloc_lock>
 800561a:	f8d8 3000 	ldr.w	r3, [r8]
 800561e:	461c      	mov	r4, r3
 8005620:	bb44      	cbnz	r4, 8005674 <_malloc_r+0x88>
 8005622:	4629      	mov	r1, r5
 8005624:	4630      	mov	r0, r6
 8005626:	f7ff ffbf 	bl	80055a8 <sbrk_aligned>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	4604      	mov	r4, r0
 800562e:	d158      	bne.n	80056e2 <_malloc_r+0xf6>
 8005630:	f8d8 4000 	ldr.w	r4, [r8]
 8005634:	4627      	mov	r7, r4
 8005636:	2f00      	cmp	r7, #0
 8005638:	d143      	bne.n	80056c2 <_malloc_r+0xd6>
 800563a:	2c00      	cmp	r4, #0
 800563c:	d04b      	beq.n	80056d6 <_malloc_r+0xea>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	4639      	mov	r1, r7
 8005642:	4630      	mov	r0, r6
 8005644:	eb04 0903 	add.w	r9, r4, r3
 8005648:	f000 fa32 	bl	8005ab0 <_sbrk_r>
 800564c:	4581      	cmp	r9, r0
 800564e:	d142      	bne.n	80056d6 <_malloc_r+0xea>
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	1a6d      	subs	r5, r5, r1
 8005654:	4629      	mov	r1, r5
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff ffa6 	bl	80055a8 <sbrk_aligned>
 800565c:	3001      	adds	r0, #1
 800565e:	d03a      	beq.n	80056d6 <_malloc_r+0xea>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	442b      	add	r3, r5
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	f8d8 3000 	ldr.w	r3, [r8]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	bb62      	cbnz	r2, 80056c8 <_malloc_r+0xdc>
 800566e:	f8c8 7000 	str.w	r7, [r8]
 8005672:	e00f      	b.n	8005694 <_malloc_r+0xa8>
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	1b52      	subs	r2, r2, r5
 8005678:	d420      	bmi.n	80056bc <_malloc_r+0xd0>
 800567a:	2a0b      	cmp	r2, #11
 800567c:	d917      	bls.n	80056ae <_malloc_r+0xc2>
 800567e:	1961      	adds	r1, r4, r5
 8005680:	42a3      	cmp	r3, r4
 8005682:	6025      	str	r5, [r4, #0]
 8005684:	bf18      	it	ne
 8005686:	6059      	strne	r1, [r3, #4]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	bf08      	it	eq
 800568c:	f8c8 1000 	streq.w	r1, [r8]
 8005690:	5162      	str	r2, [r4, r5]
 8005692:	604b      	str	r3, [r1, #4]
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f9bd 	bl	8005a14 <__malloc_unlock>
 800569a:	f104 000b 	add.w	r0, r4, #11
 800569e:	1d23      	adds	r3, r4, #4
 80056a0:	f020 0007 	bic.w	r0, r0, #7
 80056a4:	1ac2      	subs	r2, r0, r3
 80056a6:	bf1c      	itt	ne
 80056a8:	1a1b      	subne	r3, r3, r0
 80056aa:	50a3      	strne	r3, [r4, r2]
 80056ac:	e7af      	b.n	800560e <_malloc_r+0x22>
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	bf0c      	ite	eq
 80056b4:	f8c8 2000 	streq.w	r2, [r8]
 80056b8:	605a      	strne	r2, [r3, #4]
 80056ba:	e7eb      	b.n	8005694 <_malloc_r+0xa8>
 80056bc:	4623      	mov	r3, r4
 80056be:	6864      	ldr	r4, [r4, #4]
 80056c0:	e7ae      	b.n	8005620 <_malloc_r+0x34>
 80056c2:	463c      	mov	r4, r7
 80056c4:	687f      	ldr	r7, [r7, #4]
 80056c6:	e7b6      	b.n	8005636 <_malloc_r+0x4a>
 80056c8:	461a      	mov	r2, r3
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d1fb      	bne.n	80056c8 <_malloc_r+0xdc>
 80056d0:	2300      	movs	r3, #0
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e7de      	b.n	8005694 <_malloc_r+0xa8>
 80056d6:	230c      	movs	r3, #12
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	4630      	mov	r0, r6
 80056dc:	f000 f99a 	bl	8005a14 <__malloc_unlock>
 80056e0:	e794      	b.n	800560c <_malloc_r+0x20>
 80056e2:	6005      	str	r5, [r0, #0]
 80056e4:	e7d6      	b.n	8005694 <_malloc_r+0xa8>
 80056e6:	bf00      	nop
 80056e8:	200002a8 	.word	0x200002a8

080056ec <_printf_common>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4616      	mov	r6, r2
 80056f2:	4698      	mov	r8, r3
 80056f4:	688a      	ldr	r2, [r1, #8]
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfb8      	it	lt
 8005700:	4613      	movlt	r3, r2
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005708:	4607      	mov	r7, r0
 800570a:	460c      	mov	r4, r1
 800570c:	b10a      	cbz	r2, 8005712 <_printf_common+0x26>
 800570e:	3301      	adds	r3, #1
 8005710:	6033      	str	r3, [r6, #0]
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	0699      	lsls	r1, r3, #26
 8005716:	bf42      	ittt	mi
 8005718:	6833      	ldrmi	r3, [r6, #0]
 800571a:	3302      	addmi	r3, #2
 800571c:	6033      	strmi	r3, [r6, #0]
 800571e:	6825      	ldr	r5, [r4, #0]
 8005720:	f015 0506 	ands.w	r5, r5, #6
 8005724:	d106      	bne.n	8005734 <_printf_common+0x48>
 8005726:	f104 0a19 	add.w	sl, r4, #25
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	6832      	ldr	r2, [r6, #0]
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	42ab      	cmp	r3, r5
 8005732:	dc26      	bgt.n	8005782 <_printf_common+0x96>
 8005734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	3b00      	subs	r3, #0
 800573c:	bf18      	it	ne
 800573e:	2301      	movne	r3, #1
 8005740:	0692      	lsls	r2, r2, #26
 8005742:	d42b      	bmi.n	800579c <_printf_common+0xb0>
 8005744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005748:	4641      	mov	r1, r8
 800574a:	4638      	mov	r0, r7
 800574c:	47c8      	blx	r9
 800574e:	3001      	adds	r0, #1
 8005750:	d01e      	beq.n	8005790 <_printf_common+0xa4>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	f003 0306 	and.w	r3, r3, #6
 800575a:	2b04      	cmp	r3, #4
 800575c:	bf02      	ittt	eq
 800575e:	68e5      	ldreq	r5, [r4, #12]
 8005760:	6833      	ldreq	r3, [r6, #0]
 8005762:	1aed      	subeq	r5, r5, r3
 8005764:	68a3      	ldr	r3, [r4, #8]
 8005766:	bf0c      	ite	eq
 8005768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800576c:	2500      	movne	r5, #0
 800576e:	4293      	cmp	r3, r2
 8005770:	bfc4      	itt	gt
 8005772:	1a9b      	subgt	r3, r3, r2
 8005774:	18ed      	addgt	r5, r5, r3
 8005776:	2600      	movs	r6, #0
 8005778:	341a      	adds	r4, #26
 800577a:	42b5      	cmp	r5, r6
 800577c:	d11a      	bne.n	80057b4 <_printf_common+0xc8>
 800577e:	2000      	movs	r0, #0
 8005780:	e008      	b.n	8005794 <_printf_common+0xa8>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4641      	mov	r1, r8
 8005788:	4638      	mov	r0, r7
 800578a:	47c8      	blx	r9
 800578c:	3001      	adds	r0, #1
 800578e:	d103      	bne.n	8005798 <_printf_common+0xac>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	3501      	adds	r5, #1
 800579a:	e7c6      	b.n	800572a <_printf_common+0x3e>
 800579c:	18e1      	adds	r1, r4, r3
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	2030      	movs	r0, #48	@ 0x30
 80057a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057a6:	4422      	add	r2, r4
 80057a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057b0:	3302      	adds	r3, #2
 80057b2:	e7c7      	b.n	8005744 <_printf_common+0x58>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4622      	mov	r2, r4
 80057b8:	4641      	mov	r1, r8
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c8      	blx	r9
 80057be:	3001      	adds	r0, #1
 80057c0:	d0e6      	beq.n	8005790 <_printf_common+0xa4>
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7d9      	b.n	800577a <_printf_common+0x8e>
	...

080057c8 <_printf_i>:
 80057c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	7e0f      	ldrb	r7, [r1, #24]
 80057ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057d0:	2f78      	cmp	r7, #120	@ 0x78
 80057d2:	4691      	mov	r9, r2
 80057d4:	4680      	mov	r8, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	469a      	mov	sl, r3
 80057da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057de:	d807      	bhi.n	80057f0 <_printf_i+0x28>
 80057e0:	2f62      	cmp	r7, #98	@ 0x62
 80057e2:	d80a      	bhi.n	80057fa <_printf_i+0x32>
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f000 80d2 	beq.w	800598e <_printf_i+0x1c6>
 80057ea:	2f58      	cmp	r7, #88	@ 0x58
 80057ec:	f000 80b9 	beq.w	8005962 <_printf_i+0x19a>
 80057f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057f8:	e03a      	b.n	8005870 <_printf_i+0xa8>
 80057fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057fe:	2b15      	cmp	r3, #21
 8005800:	d8f6      	bhi.n	80057f0 <_printf_i+0x28>
 8005802:	a101      	add	r1, pc, #4	@ (adr r1, 8005808 <_printf_i+0x40>)
 8005804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005808:	08005861 	.word	0x08005861
 800580c:	08005875 	.word	0x08005875
 8005810:	080057f1 	.word	0x080057f1
 8005814:	080057f1 	.word	0x080057f1
 8005818:	080057f1 	.word	0x080057f1
 800581c:	080057f1 	.word	0x080057f1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057f1 	.word	0x080057f1
 8005828:	080057f1 	.word	0x080057f1
 800582c:	080057f1 	.word	0x080057f1
 8005830:	080057f1 	.word	0x080057f1
 8005834:	08005975 	.word	0x08005975
 8005838:	0800589f 	.word	0x0800589f
 800583c:	0800592f 	.word	0x0800592f
 8005840:	080057f1 	.word	0x080057f1
 8005844:	080057f1 	.word	0x080057f1
 8005848:	08005997 	.word	0x08005997
 800584c:	080057f1 	.word	0x080057f1
 8005850:	0800589f 	.word	0x0800589f
 8005854:	080057f1 	.word	0x080057f1
 8005858:	080057f1 	.word	0x080057f1
 800585c:	08005937 	.word	0x08005937
 8005860:	6833      	ldr	r3, [r6, #0]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6032      	str	r2, [r6, #0]
 8005868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005870:	2301      	movs	r3, #1
 8005872:	e09d      	b.n	80059b0 <_printf_i+0x1e8>
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	1d19      	adds	r1, r3, #4
 800587a:	6031      	str	r1, [r6, #0]
 800587c:	0606      	lsls	r6, r0, #24
 800587e:	d501      	bpl.n	8005884 <_printf_i+0xbc>
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	e003      	b.n	800588c <_printf_i+0xc4>
 8005884:	0645      	lsls	r5, r0, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0xb8>
 8005888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800588c:	2d00      	cmp	r5, #0
 800588e:	da03      	bge.n	8005898 <_printf_i+0xd0>
 8005890:	232d      	movs	r3, #45	@ 0x2d
 8005892:	426d      	negs	r5, r5
 8005894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005898:	4859      	ldr	r0, [pc, #356]	@ (8005a00 <_printf_i+0x238>)
 800589a:	230a      	movs	r3, #10
 800589c:	e011      	b.n	80058c2 <_printf_i+0xfa>
 800589e:	6821      	ldr	r1, [r4, #0]
 80058a0:	6833      	ldr	r3, [r6, #0]
 80058a2:	0608      	lsls	r0, r1, #24
 80058a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80058a8:	d402      	bmi.n	80058b0 <_printf_i+0xe8>
 80058aa:	0649      	lsls	r1, r1, #25
 80058ac:	bf48      	it	mi
 80058ae:	b2ad      	uxthmi	r5, r5
 80058b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80058b2:	4853      	ldr	r0, [pc, #332]	@ (8005a00 <_printf_i+0x238>)
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	bf14      	ite	ne
 80058b8:	230a      	movne	r3, #10
 80058ba:	2308      	moveq	r3, #8
 80058bc:	2100      	movs	r1, #0
 80058be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058c2:	6866      	ldr	r6, [r4, #4]
 80058c4:	60a6      	str	r6, [r4, #8]
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	bfa2      	ittt	ge
 80058ca:	6821      	ldrge	r1, [r4, #0]
 80058cc:	f021 0104 	bicge.w	r1, r1, #4
 80058d0:	6021      	strge	r1, [r4, #0]
 80058d2:	b90d      	cbnz	r5, 80058d8 <_printf_i+0x110>
 80058d4:	2e00      	cmp	r6, #0
 80058d6:	d04b      	beq.n	8005970 <_printf_i+0x1a8>
 80058d8:	4616      	mov	r6, r2
 80058da:	fbb5 f1f3 	udiv	r1, r5, r3
 80058de:	fb03 5711 	mls	r7, r3, r1, r5
 80058e2:	5dc7      	ldrb	r7, [r0, r7]
 80058e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058e8:	462f      	mov	r7, r5
 80058ea:	42bb      	cmp	r3, r7
 80058ec:	460d      	mov	r5, r1
 80058ee:	d9f4      	bls.n	80058da <_printf_i+0x112>
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d10b      	bne.n	800590c <_printf_i+0x144>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	07df      	lsls	r7, r3, #31
 80058f8:	d508      	bpl.n	800590c <_printf_i+0x144>
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	6861      	ldr	r1, [r4, #4]
 80058fe:	4299      	cmp	r1, r3
 8005900:	bfde      	ittt	le
 8005902:	2330      	movle	r3, #48	@ 0x30
 8005904:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005908:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800590c:	1b92      	subs	r2, r2, r6
 800590e:	6122      	str	r2, [r4, #16]
 8005910:	f8cd a000 	str.w	sl, [sp]
 8005914:	464b      	mov	r3, r9
 8005916:	aa03      	add	r2, sp, #12
 8005918:	4621      	mov	r1, r4
 800591a:	4640      	mov	r0, r8
 800591c:	f7ff fee6 	bl	80056ec <_printf_common>
 8005920:	3001      	adds	r0, #1
 8005922:	d14a      	bne.n	80059ba <_printf_i+0x1f2>
 8005924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005928:	b004      	add	sp, #16
 800592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f043 0320 	orr.w	r3, r3, #32
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	4833      	ldr	r0, [pc, #204]	@ (8005a04 <_printf_i+0x23c>)
 8005938:	2778      	movs	r7, #120	@ 0x78
 800593a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	6831      	ldr	r1, [r6, #0]
 8005942:	061f      	lsls	r7, r3, #24
 8005944:	f851 5b04 	ldr.w	r5, [r1], #4
 8005948:	d402      	bmi.n	8005950 <_printf_i+0x188>
 800594a:	065f      	lsls	r7, r3, #25
 800594c:	bf48      	it	mi
 800594e:	b2ad      	uxthmi	r5, r5
 8005950:	6031      	str	r1, [r6, #0]
 8005952:	07d9      	lsls	r1, r3, #31
 8005954:	bf44      	itt	mi
 8005956:	f043 0320 	orrmi.w	r3, r3, #32
 800595a:	6023      	strmi	r3, [r4, #0]
 800595c:	b11d      	cbz	r5, 8005966 <_printf_i+0x19e>
 800595e:	2310      	movs	r3, #16
 8005960:	e7ac      	b.n	80058bc <_printf_i+0xf4>
 8005962:	4827      	ldr	r0, [pc, #156]	@ (8005a00 <_printf_i+0x238>)
 8005964:	e7e9      	b.n	800593a <_printf_i+0x172>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f023 0320 	bic.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	e7f6      	b.n	800595e <_printf_i+0x196>
 8005970:	4616      	mov	r6, r2
 8005972:	e7bd      	b.n	80058f0 <_printf_i+0x128>
 8005974:	6833      	ldr	r3, [r6, #0]
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	6961      	ldr	r1, [r4, #20]
 800597a:	1d18      	adds	r0, r3, #4
 800597c:	6030      	str	r0, [r6, #0]
 800597e:	062e      	lsls	r6, r5, #24
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	d501      	bpl.n	8005988 <_printf_i+0x1c0>
 8005984:	6019      	str	r1, [r3, #0]
 8005986:	e002      	b.n	800598e <_printf_i+0x1c6>
 8005988:	0668      	lsls	r0, r5, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0x1bc>
 800598c:	8019      	strh	r1, [r3, #0]
 800598e:	2300      	movs	r3, #0
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	4616      	mov	r6, r2
 8005994:	e7bc      	b.n	8005910 <_printf_i+0x148>
 8005996:	6833      	ldr	r3, [r6, #0]
 8005998:	1d1a      	adds	r2, r3, #4
 800599a:	6032      	str	r2, [r6, #0]
 800599c:	681e      	ldr	r6, [r3, #0]
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	2100      	movs	r1, #0
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7fa fc1c 	bl	80001e0 <memchr>
 80059a8:	b108      	cbz	r0, 80059ae <_printf_i+0x1e6>
 80059aa:	1b80      	subs	r0, r0, r6
 80059ac:	6060      	str	r0, [r4, #4]
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	2300      	movs	r3, #0
 80059b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059b8:	e7aa      	b.n	8005910 <_printf_i+0x148>
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	4632      	mov	r2, r6
 80059be:	4649      	mov	r1, r9
 80059c0:	4640      	mov	r0, r8
 80059c2:	47d0      	blx	sl
 80059c4:	3001      	adds	r0, #1
 80059c6:	d0ad      	beq.n	8005924 <_printf_i+0x15c>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	079b      	lsls	r3, r3, #30
 80059cc:	d413      	bmi.n	80059f6 <_printf_i+0x22e>
 80059ce:	68e0      	ldr	r0, [r4, #12]
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	4298      	cmp	r0, r3
 80059d4:	bfb8      	it	lt
 80059d6:	4618      	movlt	r0, r3
 80059d8:	e7a6      	b.n	8005928 <_printf_i+0x160>
 80059da:	2301      	movs	r3, #1
 80059dc:	4632      	mov	r2, r6
 80059de:	4649      	mov	r1, r9
 80059e0:	4640      	mov	r0, r8
 80059e2:	47d0      	blx	sl
 80059e4:	3001      	adds	r0, #1
 80059e6:	d09d      	beq.n	8005924 <_printf_i+0x15c>
 80059e8:	3501      	adds	r5, #1
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	9903      	ldr	r1, [sp, #12]
 80059ee:	1a5b      	subs	r3, r3, r1
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dcf2      	bgt.n	80059da <_printf_i+0x212>
 80059f4:	e7eb      	b.n	80059ce <_printf_i+0x206>
 80059f6:	2500      	movs	r5, #0
 80059f8:	f104 0619 	add.w	r6, r4, #25
 80059fc:	e7f5      	b.n	80059ea <_printf_i+0x222>
 80059fe:	bf00      	nop
 8005a00:	08005c45 	.word	0x08005c45
 8005a04:	08005c56 	.word	0x08005c56

08005a08 <__malloc_lock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	@ (8005a10 <__malloc_lock+0x8>)
 8005a0a:	f7ff bc73 	b.w	80052f4 <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	200002a0 	.word	0x200002a0

08005a14 <__malloc_unlock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	@ (8005a1c <__malloc_unlock+0x8>)
 8005a16:	f7ff bc6e 	b.w	80052f6 <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	200002a0 	.word	0x200002a0

08005a20 <_realloc_r>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4680      	mov	r8, r0
 8005a26:	4615      	mov	r5, r2
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b921      	cbnz	r1, 8005a36 <_realloc_r+0x16>
 8005a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	4611      	mov	r1, r2
 8005a32:	f7ff bddb 	b.w	80055ec <_malloc_r>
 8005a36:	b92a      	cbnz	r2, 8005a44 <_realloc_r+0x24>
 8005a38:	f000 f858 	bl	8005aec <_free_r>
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	f000 f89c 	bl	8005b80 <_malloc_usable_size_r>
 8005a48:	4285      	cmp	r5, r0
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	d802      	bhi.n	8005a54 <_realloc_r+0x34>
 8005a4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a52:	d8f4      	bhi.n	8005a3e <_realloc_r+0x1e>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff fdc8 	bl	80055ec <_malloc_r>
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0ec      	beq.n	8005a3c <_realloc_r+0x1c>
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	462a      	mov	r2, r5
 8005a66:	4621      	mov	r1, r4
 8005a68:	bf28      	it	cs
 8005a6a:	4632      	movcs	r2, r6
 8005a6c:	f000 f830 	bl	8005ad0 <memcpy>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f000 f83a 	bl	8005aec <_free_r>
 8005a78:	463c      	mov	r4, r7
 8005a7a:	e7e0      	b.n	8005a3e <_realloc_r+0x1e>

08005a7c <memmove>:
 8005a7c:	4288      	cmp	r0, r1
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	eb01 0402 	add.w	r4, r1, r2
 8005a84:	d902      	bls.n	8005a8c <memmove+0x10>
 8005a86:	4284      	cmp	r4, r0
 8005a88:	4623      	mov	r3, r4
 8005a8a:	d807      	bhi.n	8005a9c <memmove+0x20>
 8005a8c:	1e43      	subs	r3, r0, #1
 8005a8e:	42a1      	cmp	r1, r4
 8005a90:	d008      	beq.n	8005aa4 <memmove+0x28>
 8005a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a9a:	e7f8      	b.n	8005a8e <memmove+0x12>
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	428a      	cmp	r2, r1
 8005aa2:	d100      	bne.n	8005aa6 <memmove+0x2a>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aae:	e7f7      	b.n	8005aa0 <memmove+0x24>

08005ab0 <_sbrk_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d06      	ldr	r5, [pc, #24]	@ (8005acc <_sbrk_r+0x1c>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb fb58 	bl	8001170 <_sbrk>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_sbrk_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_sbrk_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200002ac 	.word	0x200002ac

08005ad0 <memcpy>:
 8005ad0:	440a      	add	r2, r1
 8005ad2:	4291      	cmp	r1, r2
 8005ad4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad8:	d100      	bne.n	8005adc <memcpy+0xc>
 8005ada:	4770      	bx	lr
 8005adc:	b510      	push	{r4, lr}
 8005ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae6:	4291      	cmp	r1, r2
 8005ae8:	d1f9      	bne.n	8005ade <memcpy+0xe>
 8005aea:	bd10      	pop	{r4, pc}

08005aec <_free_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4605      	mov	r5, r0
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d041      	beq.n	8005b78 <_free_r+0x8c>
 8005af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af8:	1f0c      	subs	r4, r1, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfb8      	it	lt
 8005afe:	18e4      	addlt	r4, r4, r3
 8005b00:	f7ff ff82 	bl	8005a08 <__malloc_lock>
 8005b04:	4a1d      	ldr	r2, [pc, #116]	@ (8005b7c <_free_r+0x90>)
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	b933      	cbnz	r3, 8005b18 <_free_r+0x2c>
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	6014      	str	r4, [r2, #0]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b14:	f7ff bf7e 	b.w	8005a14 <__malloc_unlock>
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	d908      	bls.n	8005b2e <_free_r+0x42>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	1821      	adds	r1, r4, r0
 8005b20:	428b      	cmp	r3, r1
 8005b22:	bf01      	itttt	eq
 8005b24:	6819      	ldreq	r1, [r3, #0]
 8005b26:	685b      	ldreq	r3, [r3, #4]
 8005b28:	1809      	addeq	r1, r1, r0
 8005b2a:	6021      	streq	r1, [r4, #0]
 8005b2c:	e7ed      	b.n	8005b0a <_free_r+0x1e>
 8005b2e:	461a      	mov	r2, r3
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b10b      	cbz	r3, 8005b38 <_free_r+0x4c>
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d9fa      	bls.n	8005b2e <_free_r+0x42>
 8005b38:	6811      	ldr	r1, [r2, #0]
 8005b3a:	1850      	adds	r0, r2, r1
 8005b3c:	42a0      	cmp	r0, r4
 8005b3e:	d10b      	bne.n	8005b58 <_free_r+0x6c>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	4401      	add	r1, r0
 8005b44:	1850      	adds	r0, r2, r1
 8005b46:	4283      	cmp	r3, r0
 8005b48:	6011      	str	r1, [r2, #0]
 8005b4a:	d1e0      	bne.n	8005b0e <_free_r+0x22>
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	6053      	str	r3, [r2, #4]
 8005b52:	4408      	add	r0, r1
 8005b54:	6010      	str	r0, [r2, #0]
 8005b56:	e7da      	b.n	8005b0e <_free_r+0x22>
 8005b58:	d902      	bls.n	8005b60 <_free_r+0x74>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	e7d6      	b.n	8005b0e <_free_r+0x22>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	1821      	adds	r1, r4, r0
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf04      	itt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	6063      	str	r3, [r4, #4]
 8005b6e:	bf04      	itt	eq
 8005b70:	1809      	addeq	r1, r1, r0
 8005b72:	6021      	streq	r1, [r4, #0]
 8005b74:	6054      	str	r4, [r2, #4]
 8005b76:	e7ca      	b.n	8005b0e <_free_r+0x22>
 8005b78:	bd38      	pop	{r3, r4, r5, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200002a8 	.word	0x200002a8

08005b80 <_malloc_usable_size_r>:
 8005b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b84:	1f18      	subs	r0, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfbc      	itt	lt
 8005b8a:	580b      	ldrlt	r3, [r1, r0]
 8005b8c:	18c0      	addlt	r0, r0, r3
 8005b8e:	4770      	bx	lr

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
